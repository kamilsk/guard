// Code generated by MockGen. DO NOT EDIT.
// Source: go.octolab.org/ecosystem/guard/internal/transport/http/api (interfaces: Service)

// Package api_test is a generated GoMock package.
package api_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	request "go.octolab.org/ecosystem/guard/internal/service/types/request"
	response "go.octolab.org/ecosystem/guard/internal/service/types/response"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CheckLicense mocks base method
func (m *MockService) CheckLicense(arg0 context.Context, arg1 request.CheckLicense) response.CheckLicense {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLicense", arg0, arg1)
	ret0, _ := ret[0].(response.CheckLicense)
	return ret0
}

// CheckLicense indicates an expected call of CheckLicense
func (mr *MockServiceMockRecorder) CheckLicense(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLicense", reflect.TypeOf((*MockService)(nil).CheckLicense), arg0, arg1)
}
