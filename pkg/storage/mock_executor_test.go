// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kamilsk/guard/pkg/storage/internal (interfaces: Executor)

// Package storage_test is a generated GoMock package.
package storage_test

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	internal "github.com/kamilsk/guard/pkg/storage/internal"
)

// MockExecutor is a mock of Executor interface
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// Dialect mocks base method
func (m *MockExecutor) Dialect() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dialect")
	ret0, _ := ret[0].(string)
	return ret0
}

// Dialect indicates an expected call of Dialect
func (mr *MockExecutorMockRecorder) Dialect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dialect", reflect.TypeOf((*MockExecutor)(nil).Dialect))
}

// LicenseManager mocks base method
func (m *MockExecutor) LicenseManager(arg0 context.Context, arg1 *sql.Conn) internal.LicenseManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LicenseManager", arg0, arg1)
	ret0, _ := ret[0].(internal.LicenseManager)
	return ret0
}

// LicenseManager indicates an expected call of LicenseManager
func (mr *MockExecutorMockRecorder) LicenseManager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LicenseManager", reflect.TypeOf((*MockExecutor)(nil).LicenseManager), arg0, arg1)
}

// LicenseReader mocks base method
func (m *MockExecutor) LicenseReader(arg0 context.Context, arg1 *sql.Conn) internal.LicenseReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LicenseReader", arg0, arg1)
	ret0, _ := ret[0].(internal.LicenseReader)
	return ret0
}

// LicenseReader indicates an expected call of LicenseReader
func (mr *MockExecutorMockRecorder) LicenseReader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LicenseReader", reflect.TypeOf((*MockExecutor)(nil).LicenseReader), arg0, arg1)
}

// UserManager mocks base method
func (m *MockExecutor) UserManager(arg0 context.Context, arg1 *sql.Conn) internal.UserManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserManager", arg0, arg1)
	ret0, _ := ret[0].(internal.UserManager)
	return ret0
}

// UserManager indicates an expected call of UserManager
func (mr *MockExecutorMockRecorder) UserManager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserManager", reflect.TypeOf((*MockExecutor)(nil).UserManager), arg0, arg1)
}
