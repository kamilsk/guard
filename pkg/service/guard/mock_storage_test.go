// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kamilsk/guard/pkg/service/guard (interfaces: Storage)

// Package guard_test is a generated GoMock package.
package guard_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "github.com/kamilsk/guard/pkg/service/types"
	query "github.com/kamilsk/guard/pkg/storage/query"
	types0 "github.com/kamilsk/guard/pkg/storage/types"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// LicenseByEmployee mocks base method
func (m *MockStorage) LicenseByEmployee(arg0 context.Context, arg1 types.ID) (types0.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LicenseByEmployee", arg0, arg1)
	ret0, _ := ret[0].(types0.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LicenseByEmployee indicates an expected call of LicenseByEmployee
func (mr *MockStorageMockRecorder) LicenseByEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LicenseByEmployee", reflect.TypeOf((*MockStorage)(nil).LicenseByEmployee), arg0, arg1)
}

// LicenseByID mocks base method
func (m *MockStorage) LicenseByID(arg0 context.Context, arg1 types.ID) (types0.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LicenseByID", arg0, arg1)
	ret0, _ := ret[0].(types0.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LicenseByID indicates an expected call of LicenseByID
func (mr *MockStorageMockRecorder) LicenseByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LicenseByID", reflect.TypeOf((*MockStorage)(nil).LicenseByID), arg0, arg1)
}

// RegisterAccount mocks base method
func (m *MockStorage) RegisterAccount(arg0 context.Context, arg1 *query.RegisterAccount) (*types0.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAccount", arg0, arg1)
	ret0, _ := ret[0].(*types0.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAccount indicates an expected call of RegisterAccount
func (mr *MockStorageMockRecorder) RegisterAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAccount", reflect.TypeOf((*MockStorage)(nil).RegisterAccount), arg0, arg1)
}
